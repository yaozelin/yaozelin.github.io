<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>git秘钥</title>
      <link href="/2021/11/12/git-mi-yao/"/>
      <url>/2021/11/12/git-mi-yao/</url>
      
        <content type="html"><![CDATA[<h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><pre class=" language-bash"><code class="language-bash">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 </code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>splunk设置反向代理</title>
      <link href="/2021/01/20/splunk-she-zhi-fan-xiang-dai-li/"/>
      <url>/2021/01/20/splunk-she-zhi-fan-xiang-dai-li/</url>
      
        <content type="html"><![CDATA[<h2 id="splunk设置反向代理"><a href="#splunk设置反向代理" class="headerlink" title="splunk设置反向代理"></a>splunk设置反向代理</h2><pre class=" language-bash"><code class="language-bash">splunk/etc/system/local/web.conf添加属性   root_endpoint <span class="token operator">=</span> /splunk注意是添加属性 不要删除那条设置的端口属性 </code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> splunk </tag>
            
            <tag> 反向代理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>splunk的js</title>
      <link href="/2020/11/11/splunk-de-js/"/>
      <url>/2020/11/11/splunk-de-js/</url>
      
        <content type="html"><![CDATA[<h2 id="splunk的js"><a href="#splunk的js" class="headerlink" title="splunk的js"></a>splunk的js</h2><pre class=" language-bash"><code class="language-bash">require<span class="token punctuation">(</span><span class="token punctuation">[</span>    <span class="token string">'underscore'</span>,    <span class="token string">'jquery'</span>,    <span class="token string">'splunkjs/mvc'</span>,    <span class="token string">'splunkjs/mvc/simplexml/ready!'</span><span class="token punctuation">]</span>, function<span class="token punctuation">(</span>_, $, mvc<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>   <span class="token keyword">function</span> getUrlParam<span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                var reg <span class="token operator">=</span> new RegExp<span class="token punctuation">(</span><span class="token string">"(^|&amp;)"</span> + name + <span class="token string">"=([^&amp;]*)(&amp;|$)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                var r <span class="token operator">=</span> window.location.search.substr<span class="token punctuation">(</span>1<span class="token punctuation">)</span>.match<span class="token punctuation">(</span>reg<span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token keyword">return</span> unescape<span class="token punctuation">(</span>r<span class="token punctuation">[</span>2<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> null<span class="token punctuation">;</span>             <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>            var x1 <span class="token operator">=</span> getUrlParam<span class="token punctuation">(</span><span class="token string">'judge1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>x1 <span class="token operator">==</span><span class="token operator">=</span> <span class="token string">"Customer Focus"</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                 document.getElementById<span class="token punctuation">(</span><span class="token string">"customerfocus"</span><span class="token punctuation">)</span>.click<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125; else if (x1 === "Process") &amp;#123;</span>                 document.getElementById<span class="token punctuation">(</span><span class="token string">"itprocess"</span><span class="token punctuation">)</span>.click<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125; else if (x1 === "Learning and Growth") &amp;#123;</span>                 document.getElementById<span class="token punctuation">(</span><span class="token string">"learning"</span><span class="token punctuation">)</span>.click<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125; </span>            <span class="token keyword">else</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                 document.getElementById<span class="token punctuation">(</span><span class="token string">"itprocess"</span><span class="token punctuation">)</span>.click<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;);</span></code></pre><h3 id="追加说明"><a href="#追加说明" class="headerlink" title="追加说明"></a>追加说明</h3><p>JS的上传并调试<br>    1.新建JS文件<br>    2.放到路径下 C:Program Files\Splunk\etc\apps\search\appserver\static<br>    （source）里不要忘了引用这个file.js文件<br>    3._bump<br>    4.刷新页面</p>]]></content>
      
      
      
        <tags>
            
            <tag> splunk </tag>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>将splunk的index存到别的盘</title>
      <link href="/2020/11/11/jiang-splunk-de-index-cun-dao-bie-de-pan/"/>
      <url>/2020/11/11/jiang-splunk-de-index-cun-dao-bie-de-pan/</url>
      
        <content type="html"><![CDATA[<h2 id="将splunk的index存到别的盘"><a href="#将splunk的index存到别的盘" class="headerlink" title="将splunk的index存到别的盘"></a>将splunk的index存到别的盘</h2><p>方法一：更改环境变量<br>  1.将C:\Program Files\Splunk\etc\splunk-launch.conf文件更改配置<br>  2.将其中的# SPLUNK_DB=C:\Program Files\Splunk\var\lib\splunk<br>    “=”后面的路径改成自己想要的路径，splunk以后 new index的时候index会<br>    自动创建在这个路径下。<br>  3.cmd 命令 stop splunk ，更改完conf文件之后，start splunk ，会发现<br>    splunk之前所有的index都在你所更改的路径下创建了，并且以后新建的index<br>     也在此路径下。（ cmd cd命令进入splunk的bin 使用.\splunk stop 和start进行<br>    停止重启splunk）<br>方法二：<br>    1.在index想要存放的路径下创建同名index文件夹（包含db colddb thaweddb三个<br>    文件），把splunk C盘中的数据考到这三个文件对应的文件中来，<br>    2.在splunk web 删除这个index  与此同时新建这个index（同名）此时把路径换成<br>    我们创建的目录，<br>    3.重启splunk ，index一摸一样的存到的别的盘（或者是目录下）。<br>    4.缺点是 在splunk web创建index的时候，即使db colddb thaweddb文件创建在了<br>    我们指定的位置，但是Splunk\var\lib\splunk下依旧会创建一个同名的index但是里面<br>    只有一个文件 datamodul_summary文件。</p>]]></content>
      
      
      
        <tags>
            
            <tag> splunk </tag>
            
            <tag> index </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell脚本</title>
      <link href="/2020/10/20/shell-jiao-ben/"/>
      <url>/2020/10/20/shell-jiao-ben/</url>
      
        <content type="html"><![CDATA[<h2 id="shell脚本"><a href="#shell脚本" class="headerlink" title="shell脚本"></a>shell脚本</h2><h3 id="解释说明"><a href="#解释说明" class="headerlink" title="解释说明"></a>解释说明</h3><p>target=ICT09010<br>str_I=I<br>定义变量 引用的时候用$加变量名</p><p>focus_line=<code>cip dn                           |grep $target             |sed &#39;s/)/)@/g&#39;                       |sed &#39;s/@/\n/g&#39;               |grep $target     |grep -o &#39;(.*)&#39; </code><br>赋值变量     这个命令会出一段结果               过滤出带变量名的那一行     为了不损害括号，给括号后面加一个@符号     把@符号置换成换行符            取到带变量的新行    取到括号里的东(带括号)<br>（上一行很长请右滑）<br>result=$(echo $focus_line | grep “${str_I}”)<br>判断后面的变量是否在括号里并返回值。<br>if [[ “$result” != “” ]]<br>then<br>    echo “HAVE I”<br>else<br>    echo “NOT HAVE I”<br>fi<br>如果括号里有I则输出HAVE I</p><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><pre class=" language-bash"><code class="language-bash">target<span class="token operator">=</span>ICT09010str_I<span class="token operator">=</span>Ifocus_line<span class="token operator">=</span>`cip dn <span class="token operator">|</span><span class="token function">grep</span> <span class="token variable">$target</span><span class="token operator">|</span><span class="token function">sed</span> <span class="token string">'s/)/)@/g'</span><span class="token operator">|</span><span class="token function">sed</span> <span class="token string">'s/@/\n/g'</span><span class="token operator">|</span><span class="token function">grep</span> <span class="token variable">$target</span><span class="token operator">|</span><span class="token function">grep</span> -o <span class="token string">'(.*)'</span> `result<span class="token operator">=</span><span class="token punctuation">$(</span>echo <span class="token variable">$focus_line</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">"$&amp;#123;str_I&amp;#125;"</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$result</span>"</span> <span class="token operator">!=</span> <span class="token string">""</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token keyword">then</span>    <span class="token keyword">echo</span> <span class="token string">"HAVE I"</span><span class="token keyword">else</span>    <span class="token keyword">echo</span> <span class="token string">"NOT HAVE I"</span><span class="token keyword">fi</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>splunk的lisence</title>
      <link href="/2020/10/11/splunk-de-lisence/"/>
      <url>/2020/10/11/splunk-de-lisence/</url>
      
        <content type="html"><![CDATA[<h2 id="splunk的lisence"><a href="#splunk的lisence" class="headerlink" title="splunk的lisence"></a>splunk的lisence</h2><h3 id="在这个文件夹的路径下依次执行如下命令："><a href="#在这个文件夹的路径下依次执行如下命令：" class="headerlink" title="在这个文件夹的路径下依次执行如下命令："></a>在这个文件夹的路径下依次执行如下命令：</h3><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>?xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"UTF-8"</span>?<span class="token operator">></span><span class="token operator">&lt;</span>license<span class="token operator">></span>  <span class="token operator">&lt;</span>signature<span class="token operator">></span>Lq2bDetPfsTrK0Shxxpl77nMJqmt5xXzrcvz7F76+zdSYshYqJNZWjLI4qu7w1R3oMka/K7h3V7jn04NpY84VryzJKAWYoI+LmjIbV0M7FdUKJQq3XqK6XfMMIaQNCvd2AVRDmPqO9GvfGYpGJE5LBpkGpvSD4s9vzcd7BUJadYvj1zSKk8g5dNc31vOhfFjRM9Mm2Y408Jxs5vIqmIgyXOaFPJ+e0r9lKwmL89sHPxxhssIzE5rdjAnDK2S9fceH/Gn6O0+cyEqEWe1J81sUPsZiwzw6CNrm+ET93I92ZqH4l7nf9jNTm1F2SRQE+jOmiCzI1SJ5+VieHFln6k4rg<span class="token operator">==</span><span class="token operator">&lt;</span>/signature<span class="token operator">></span>  <span class="token operator">&lt;</span>payload<span class="token operator">></span>    <span class="token operator">&lt;</span>type<span class="token operator">></span>enterprise<span class="token operator">&lt;</span>/type<span class="token operator">></span>    <span class="token operator">&lt;</span>group_id<span class="token operator">></span>Enterprise<span class="token operator">&lt;</span>/group_id<span class="token operator">></span>    <span class="token operator">&lt;</span>quota<span class="token operator">></span>21474836480<span class="token operator">&lt;</span>/quota<span class="token operator">></span>    <span class="token operator">&lt;</span>max_violations<span class="token operator">></span>5<span class="token operator">&lt;</span>/max_violations<span class="token operator">></span>    <span class="token operator">&lt;</span>window_period<span class="token operator">></span>30<span class="token operator">&lt;</span>/window_period<span class="token operator">></span>    <span class="token operator">&lt;</span>creation_time<span class="token operator">></span>1603522800<span class="token operator">&lt;</span>/creation_time<span class="token operator">></span>    <span class="token operator">&lt;</span>label<span class="token operator">></span>Splunk Enterprise Term License - No Enforcement <span class="token punctuation">(</span>6.5 <span class="token punctuation">)</span><span class="token operator">&lt;</span>/label<span class="token operator">></span>    <span class="token operator">&lt;</span>expiration_time<span class="token operator">></span>1635058799<span class="token operator">&lt;</span>/expiration_time<span class="token operator">></span>    <span class="token operator">&lt;</span>features<span class="token operator">></span>      <span class="token operator">&lt;</span>feature<span class="token operator">></span>Auth<span class="token operator">&lt;</span>/feature<span class="token operator">></span>      <span class="token operator">&lt;</span>feature<span class="token operator">></span>FwdData<span class="token operator">&lt;</span>/feature<span class="token operator">></span>      <span class="token operator">&lt;</span>feature<span class="token operator">></span>RcvData<span class="token operator">&lt;</span>/feature<span class="token operator">></span>      <span class="token operator">&lt;</span>feature<span class="token operator">></span>LocalSearch<span class="token operator">&lt;</span>/feature<span class="token operator">></span>      <span class="token operator">&lt;</span>feature<span class="token operator">></span>DistSearch<span class="token operator">&lt;</span>/feature<span class="token operator">></span>      <span class="token operator">&lt;</span>feature<span class="token operator">></span>RcvSearch<span class="token operator">&lt;</span>/feature<span class="token operator">></span>      <span class="token operator">&lt;</span>feature<span class="token operator">></span>ScheduledSearch<span class="token operator">&lt;</span>/feature<span class="token operator">></span>      <span class="token operator">&lt;</span>feature<span class="token operator">></span>Alerting<span class="token operator">&lt;</span>/feature<span class="token operator">></span>      <span class="token operator">&lt;</span>feature<span class="token operator">></span>DeployClient<span class="token operator">&lt;</span>/feature<span class="token operator">></span>      <span class="token operator">&lt;</span>feature<span class="token operator">></span>DeployServer<span class="token operator">&lt;</span>/feature<span class="token operator">></span>      <span class="token operator">&lt;</span>feature<span class="token operator">></span>SplunkWeb<span class="token operator">&lt;</span>/feature<span class="token operator">></span>      <span class="token operator">&lt;</span>feature<span class="token operator">></span>SigningProcessor<span class="token operator">&lt;</span>/feature<span class="token operator">></span>      <span class="token operator">&lt;</span>feature<span class="token operator">></span>SyslogOutputProcessor<span class="token operator">&lt;</span>/feature<span class="token operator">></span>      <span class="token operator">&lt;</span>feature<span class="token operator">></span>CanBeRemoteMaster<span class="token operator">&lt;</span>/feature<span class="token operator">></span>    <span class="token operator">&lt;</span>/features<span class="token operator">></span>    <span class="token operator">&lt;</span>optional_features<span class="token operator">></span>      <span class="token operator">&lt;</span>feature<span class="token operator">></span>DisableQuotaEnforcement<span class="token operator">&lt;</span>/feature<span class="token operator">></span>    <span class="token operator">&lt;</span>/optional_features<span class="token operator">></span>    <span class="token operator">&lt;</span>sourcetypes/<span class="token operator">></span>    <span class="token operator">&lt;</span>guid<span class="token operator">></span>6091F182-0286-47F5-B634-8CEB2FCB0852<span class="token operator">&lt;</span>/guid<span class="token operator">></span>  <span class="token operator">&lt;</span>/payload<span class="token operator">></span><span class="token operator">&lt;</span>/license<span class="token operator">></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> splunk </tag>
            
            <tag> lisence </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>两个静态页面传递动态参数</title>
      <link href="/2020/10/01/liang-ge-jing-tai-ye-mian-chuan-di-dong-tai-can-shu/"/>
      <url>/2020/10/01/liang-ge-jing-tai-ye-mian-chuan-di-dong-tai-can-shu/</url>
      
        <content type="html"><![CDATA[<h3 id="本文来介绍如何在两个静态页面之间传递一个或者多个动态的参数（方法一）。"><a href="#本文来介绍如何在两个静态页面之间传递一个或者多个动态的参数（方法一）。" class="headerlink" title="本文来介绍如何在两个静态页面之间传递一个或者多个动态的参数（方法一）。"></a>本文来介绍如何在两个静态页面之间传递一个或者多个动态的参数（方法一）。</h3><p><strong>通过URL传参</strong></p><p><strong>思路：</strong></p><p>假定两个页面A和B，我们通过点击A页面的一个按钮链接跳转到B，A页面的链接上携带了一个参数，到B页面通过JS取到参数上携带的值。</p><p><strong>A页面代码：</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>html<span class="token operator">></span>  <span class="token operator">&lt;</span>form<span class="token operator">></span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"https://www.ABC.com/CCC?form.参数=100（值）"</span><span class="token operator">></span>跳转按钮<span class="token operator">&lt;</span>/a<span class="token operator">></span>    <span class="token operator">&lt;</span>/div<span class="token operator">></span>  <span class="token operator">&lt;</span>/form<span class="token operator">></span><span class="token operator">&lt;</span>/html<span class="token operator">></span></code></pre><p><strong>我们此时只需在B页面写个JS如下便可以取到参数：</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token keyword">function</span> getUrlParam<span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                var reg <span class="token operator">=</span> new RegExp<span class="token punctuation">(</span><span class="token string">"(^|&amp;)"</span> + name + <span class="token string">"=([^&amp;]*)(&amp;|$)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                var r <span class="token operator">=</span> window.location.search.substr<span class="token punctuation">(</span>1<span class="token punctuation">)</span>.match<span class="token punctuation">(</span>reg<span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token keyword">return</span> unescape<span class="token punctuation">(</span>r<span class="token punctuation">[</span>2<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> null<span class="token punctuation">;</span>             <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>            var x1 <span class="token operator">=</span> getUrlParam<span class="token punctuation">(</span><span class="token string">'参数'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>x1 <span class="token operator">==</span><span class="token operator">=</span> <span class="token string">"Customer Focus"</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                 document.getElementById<span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">)</span>.click<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125; </span></code></pre><p><strong>这里我们使用到了正则表达式，匹配URL中的传过来的参数，取到了值便可以进行操作了，我做的操作是让id为c的进行点击操作</strong><br><strong>当然不要忘了应用的时候注意粗心大意的问题，例如link写完导入的JS文件。</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> HTML5 </tag>
            
            <tag> 正则表达式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React——1</title>
      <link href="/2020/09/20/react-xue-xi-1/"/>
      <url>/2020/09/20/react-xue-xi-1/</url>
      
        <content type="html"><![CDATA[<h2 id="React-1"><a href="#React-1" class="headerlink" title="React-1"></a>React-1</h2><h3 id=""><a href="#" class="headerlink" title=""></a></h3><pre class=" language-bash"><code class="language-bash">ssh-keygen -t rsa -f ~/.ssh/mykey -C <span class="token string">"zelin.yao@accenture.com"</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>生成shh的key</title>
      <link href="/2020/09/20/sheng-cheng-shh-de-key/"/>
      <url>/2020/09/20/sheng-cheng-shh-de-key/</url>
      
        <content type="html"><![CDATA[<h2 id="生成shh的key"><a href="#生成shh的key" class="headerlink" title="生成shh的key"></a>生成shh的key</h2><pre class=" language-bash"><code class="language-bash">ssh-keygen -t rsa -f ~/.ssh/mykey -C <span class="token string">"zelin.yao@accenture.com"</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> ssh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>splunk后台添加user账号cmd进入splunk的bin目录下执行后重启splunk</title>
      <link href="/2020/08/20/splunk-hou-tai-tian-jia-user-zhang-hao-cmd-jin-ru-splunk-de-bin-mu-lu-xia-zhi-xing-hou-chong-qi-splunk/"/>
      <url>/2020/08/20/splunk-hou-tai-tian-jia-user-zhang-hao-cmd-jin-ru-splunk-de-bin-mu-lu-xia-zhi-xing-hou-chong-qi-splunk/</url>
      
        <content type="html"><![CDATA[<h2 id="splunk后台添加user账号cmd进入splunk的bin目录下执行后重启splunk"><a href="#splunk后台添加user账号cmd进入splunk的bin目录下执行后重启splunk" class="headerlink" title="splunk后台添加user账号cmd进入splunk的bin目录下执行后重启splunk"></a>splunk后台添加user账号cmd进入splunk的bin目录下执行后重启splunk</h2><pre class=" language-bash"><code class="language-bash">splunk cmd splunkd rest --noauth POST /services/authentication/users <span class="token string">"name=shun.zhou&amp;password=shunzhou&amp;roles=admin"</span> </code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> splunk </tag>
            
            <tag> user </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>命令</title>
      <link href="/2020/08/20/ming-ling/"/>
      <url>/2020/08/20/ming-ling/</url>
      
        <content type="html"><![CDATA[<h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><pre class=" language-bash"><code class="language-bash">压缩命令  ：tar -zcvf /压缩完的路径以及名称/aeon_ui.tar.gz /被压缩文件位置/    </code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>splunk开机自启动</title>
      <link href="/2020/01/20/splunk-kai-ji-zi-qi-dong/"/>
      <url>/2020/01/20/splunk-kai-ji-zi-qi-dong/</url>
      
        <content type="html"><![CDATA[<h2 id="splunk开机自启动"><a href="#splunk开机自启动" class="headerlink" title="splunk开机自启动"></a>splunk开机自启动</h2><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>sudo<span class="token punctuation">]</span> <span class="token variable">$SPLUNK_HOME</span>/bin/    ./splunk <span class="token function">enable</span> boot-start </code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> splunk </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker安装</title>
      <link href="/2020/01/01/docker-an-zhuang/"/>
      <url>/2020/01/01/docker-an-zhuang/</url>
      
        <content type="html"><![CDATA[<h2 id="docker安装"><a href="#docker安装" class="headerlink" title="docker安装"></a>docker安装</h2><h3 id="控制面板-gt-程序-gt-启用或关闭Windows功能-gt-把Hyper-v勾上-gt-重启电脑"><a href="#控制面板-gt-程序-gt-启用或关闭Windows功能-gt-把Hyper-v勾上-gt-重启电脑" class="headerlink" title="控制面板-&gt;程序-&gt;启用或关闭Windows功能-&gt;把Hyper-v勾上-&gt;重启电脑"></a>控制面板-&gt;程序-&gt;启用或关闭Windows功能-&gt;把Hyper-v勾上-&gt;重启电脑</h3><h3 id="重启之后打开任务管理器，点性能，发现cpu已经虚拟化了"><a href="#重启之后打开任务管理器，点性能，发现cpu已经虚拟化了" class="headerlink" title="重启之后打开任务管理器，点性能，发现cpu已经虚拟化了"></a>重启之后打开任务管理器，点性能，发现cpu已经虚拟化了</h3><h3 id="打开链接-https-docs-docker-com-docker-for-windows-install-download-docker-for-windows"><a href="#打开链接-https-docs-docker-com-docker-for-windows-install-download-docker-for-windows" class="headerlink" title="打开链接 https://docs.docker.com/docker-for-windows/install/#download-docker-for-windows"></a>打开链接 <a href="https://docs.docker.com/docker-for-windows/install/#download-docker-for-windows">https://docs.docker.com/docker-for-windows/install/#download-docker-for-windows</a></h3><h3 id="安装完后打开powershell，执行docker-–version"><a href="#安装完后打开powershell，执行docker-–version" class="headerlink" title="安装完后打开powershell，执行docker –version"></a>安装完后打开powershell，执行docker –version</h3><h3 id="进入链接-https-docs-microsoft-com-en-us-windows-wsl-install-win10-step-4-download-the-linux-kernel-update-package"><a href="#进入链接-https-docs-microsoft-com-en-us-windows-wsl-install-win10-step-4-download-the-linux-kernel-update-package" class="headerlink" title="进入链接 https://docs.microsoft.com/en-us/windows/wsl/install-win10#step-4---download-the-linux-kernel-update-package"></a>进入链接 <a href="https://docs.microsoft.com/en-us/windows/wsl/install-win10#step-4---download-the-linux-kernel-update-package">https://docs.microsoft.com/en-us/windows/wsl/install-win10#step-4---download-the-linux-kernel-update-package</a></h3><h3 id="将上面下载的msi文件所在的文件夹，右键管理员权限这个msi文件。"><a href="#将上面下载的msi文件所在的文件夹，右键管理员权限这个msi文件。" class="headerlink" title="将上面下载的msi文件所在的文件夹，右键管理员权限这个msi文件。"></a>将上面下载的msi文件所在的文件夹，右键管理员权限这个msi文件。</h3>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>batch</title>
      <link href="/2019/11/11/batch/"/>
      <url>/2019/11/11/batch/</url>
      
        <content type="html"><![CDATA[<h2 id="batch说明"><a href="#batch说明" class="headerlink" title="batch说明"></a>batch说明</h2><p>更改txt文件后缀名为bat 即可创建bat文件</p><p>实例：</p><p>@ECHO OFF<br>TITLE INDEX——backup<br>echo ———————————-<br>echo=<br>echo=<br>del /q /s C:\indexbackup\tmp*.*</p><p>md C:\indexbackup\tmp\idx_dwh_session</p><p>set a=”C:\Program Files\Splunk\var\lib\splunk\idx_dwh_session”<br>Xcopy %a% C:\indexbackup\tmp\idx_dwh_session /e /y</p><p>PowerShell Compress-Archive -Path C:\indexbackup\tmp\idx_dwh_session -Force -DestinationPath C:\indexbackup\idx_dwh_session.zip</p><p>del /q /s c:\indexbackup\index*.*</p><p>set b=”C:\indexbackup\tmp\idx_dwh_session.zip”<br>xcopy %b% c:\indexbackup\index /e /y</p><p>rmdir /q /s C:\indexbackup\tmp*.*</p><p>echo=<br>echo=<br>echo —————-succeed——————<br>PAUSE</p><p>其中/e /y 表示执行xcopy的时候创建目录树，空文件也copy</p><pre><code>/q /s 表示 执行过程中不提示是否删除 当echo设置off值的时候，那么下面的指令都将只执行而不显示，当再次出现echo on时下面的语句才为可见的（回显）。echo通常和@一起使用，@放在echo的前面，即是 @echo，作用是让@后面的句子不显示出来，而@本身也是不显示的，那么通过 @echo off 可达到不显示任何信息的效果del  C:\indexbackup\tmp\*.* 代表删除tmp文件夹下的所有文件，不包括文件夹。rmdir 也是删除的意思  但是删除的是目录树   而上面的del删除的是到最底的文件却不包括文件夹 set b=&quot;C:\indexbackup\tmp\idx_dwh_session.zip&quot; 是设置参数，%b%就可以调用。md C:\indexbackup\tmp\idx_dwh_session  表示在指定路径tmp下创建idx_dwh_session 文件夹</code></pre><p>   PowerShell Compress-Archive -Path -DestinationPath  是压缩命令 但是要看电脑版本  例如win7就不行。</p><p>实例二：</p><p>@echo off<br>del /q /s C:\indexbackup\tmp*.*<br>setlocal enabledelayedexpansion<br>for /f “tokens=* delims=”  %%i in (C:\indexbackup\session_name.txt)  do (<br>set target=%%i<br>echo !target!<br>PowerShell Compress-Archive -Path D:\splunk_db!target! -Force -DestinationPath C:\indexbackup\tmp!target!.zip<br>)<br>del /q /s C:\indexbackup\index*.*<br>xcopy C:\indexbackup\tmp C:\indexbackup\index /e /y<br>del /q /s C:\indexbackup\tmp*.*</p><p>其中for /f “tokens=* delims=”  %%i in (C:\session_name.txt)  do (echo !target!)是一个循环，从txt文件读取写好的index名，当作变量放进程序后面的路径里。<br>PowerShell Compress-Archive -Path D:\splunk_db!target! -Force -DestinationPath C:\indexbackup\tmp!target!.zip  注意其中的变量引用。</p><p>实例三：</p><p>@echo off<br>set target=’’<br>setlocal enabledelayedexpansion<br>(for /f “tokens=2 delims==” %%i in (‘findstr /n /i “AUTO_ID” C:\abc\read.txt’) do set /a target=%%i)<br>echo !target!<br>pause&gt;nul</p><p>从一个文件夹C:\abc\read.txt中取到一个键值对的数字值<br>其中 delims== 是按照等号一行划分成两列；  tokens=2的意思是取第二列的值。<br>      findstr /n /i “AUTO_ID”是 从C:\abc\read.txt中匹配到这行。/n 的意思是输出是第几行，/i的意思是不区分大小写。</p><h3 id="实例1"><a href="#实例1" class="headerlink" title="实例1"></a>实例1</h3><pre class=" language-bash"><code class="language-bash">@echo offdel /q /s C:\Users\zelin.yao\Desktop\C\indexbackup\tmp\*.*setlocal enabledelayedexpansion<span class="token keyword">for</span> /f <span class="token string">"tokens=* delims="</span>  %%i <span class="token keyword">in</span> <span class="token punctuation">(</span>C:\Users\zelin.yao\Desktop\C\indexbackup\indexname.txt<span class="token punctuation">)</span>  <span class="token keyword">do</span> <span class="token punctuation">(</span><span class="token keyword">set</span> target<span class="token operator">=</span>%%i<span class="token keyword">echo</span> <span class="token operator">!</span>target<span class="token operator">!</span>PowerShell Compress-Archive -Path C:\Users\zelin.yao\Desktop\D\splunk_db\<span class="token operator">!</span>target<span class="token operator">!</span> -Force -DestinationPath C:\Users\zelin.yao\Desktop\C\indexbackup\tmp\<span class="token operator">!</span>target<span class="token operator">!</span>.zip<span class="token punctuation">)</span>  del /q /s C:\Users\zelin.yao\Desktop\C\indexbackup\index\*.*xcopy C:\Users\zelin.yao\Desktop\C\indexbackup\tmp C:\Users\zelin.yao\Desktop\C\indexbackup\index /e /ydel /q /s C:\Users\zelin.yao\Desktop\C\indexbackup\tmp\*.*</code></pre><h3 id="实例2"><a href="#实例2" class="headerlink" title="实例2"></a>实例2</h3><pre class=" language-bash"><code class="language-bash">@echo off<span class="token keyword">set</span> target<span class="token operator">=</span><span class="token string">''</span>setlocal enabledelayedexpansion<span class="token punctuation">(</span>for /f <span class="token string">"tokens=2 delims=="</span> %%i <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token string">'findstr /n /i "AUTOID" C:\abc\read.txt'</span><span class="token punctuation">)</span> <span class="token keyword">do</span> <span class="token keyword">set</span> /a target<span class="token operator">=</span>%%i<span class="token punctuation">)</span><span class="token keyword">echo</span> <span class="token operator">!</span>target<span class="token operator">!</span>pause<span class="token operator">></span>nul</code></pre><h3 id="实例3"><a href="#实例3" class="headerlink" title="实例3"></a>实例3</h3><pre class=" language-bash"><code class="language-bash">del /q /s C:\indexbackup\tmp\*.*PowerShell Compress-Archive -Path D:\splunk_db\idx_dwh_session -Force -DestinationPath C:\indexbackup\tmp\idx_dwh_session.zipPowerShell Compress-Archive -Path D:\splunk_db\idx_bis_session -Force -DestinationPath C:\indexbackup\tmp\idx_bis_session.zipPowerShell Compress-Archive -Path D:\splunk_db\idx_bizmin_session -Force -DestinationPath C:\indexbackup\tmp\idx_bizmin_session.zipdel /q /s C:\indexbackup\index\*.*xcopy C:\indexbackup\tmp C:\indexbackup\index /e /ydel /q /s C:\indexbackup\tmp\*.*</code></pre><h3 id="实例4"><a href="#实例4" class="headerlink" title="实例4"></a>实例4</h3><pre class=" language-bash"><code class="language-bash">@echo off<span class="token keyword">set</span> split<span class="token operator">=</span>-<span class="token keyword">set</span> datetimesplit<span class="token operator">=</span> setlocal enabledelayedexpansion<span class="token keyword">for</span> /f <span class="token string">"tokens=1,2,3,4,*"</span> %%i <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token string">'reg query "HKCU\Control Panel\International" ^| find /i "sShortDate"'</span><span class="token punctuation">)</span> <span class="token keyword">do</span> SET <span class="token string">"dateformat=%%k"</span> IF <span class="token string">"%dateformat%"</span> <span class="token operator">==</span> <span class="token string">"M/d/yyyy"</span>   <span class="token keyword">set</span> A_DATE<span class="token operator">=</span>%date:~6,4%%split%%date:~0,2%%split%%date:~3,2%IF <span class="token string">"%dateformat%"</span> <span class="token operator">==</span> <span class="token string">"M/d/yy"</span>     <span class="token keyword">set</span> A_DATE<span class="token operator">=</span>20%date:~6,2%%split%%date:~0,2%%split%%date:~3,2%IF <span class="token string">"%dateformat%"</span> <span class="token operator">==</span> <span class="token string">"MM/dd/yy"</span>   <span class="token keyword">set</span> A_DATE<span class="token operator">=</span>20%date:~6,2%%split%%date:~0,2%%split%%date:~3,2%IF <span class="token string">"%dateformat%"</span> <span class="token operator">==</span> <span class="token string">"MM/dd/yyyy"</span> <span class="token keyword">set</span> A_DATE<span class="token operator">=</span>%date:~6,4%%split%%date:~0,2%%split%%date:~3,2%IF <span class="token string">"%dateformat%"</span> <span class="token operator">==</span> <span class="token string">"yy/MM/dd"</span>   <span class="token keyword">set</span> A_DATE<span class="token operator">=</span>20%date:~0,2%%split%%date:~3,2%%split%%date:~6,2%IF <span class="token string">"%dateformat%"</span> <span class="token operator">==</span> <span class="token string">"yyyy-MM-dd"</span> <span class="token keyword">set</span> A_DATE<span class="token operator">=</span>%date:~0,4%%split%%date:~5,2%%split%%date:~8,2%IF <span class="token string">"%dateformat%"</span> <span class="token operator">==</span> <span class="token string">"dd-MMM-yy"</span>  <span class="token keyword">set</span> A_DATE<span class="token operator">=</span>20%date:~7,2%%split%%date:~3,3%%split%%date:~0,2%<span class="token keyword">set</span> A_NOW<span class="token operator">=</span>%A_DATE%%datetimesplit%%time:~0,2%%split%%time:~3,2%%split%%time:~6,2%<span class="token keyword">echo</span> %cd%-------------1<span class="token function">cd</span> C:\mywizard-aiops----ntt-phase2<span class="token function">git</span> pull<span class="token keyword">echo</span> %cd%-------------2<span class="token function">rmdir</span> /s /q C:\mywizard-aiops----ntt-phase2\splunk\sala\<span class="token function">cd</span> C:\mywizard-aiops----ntt-phase2\splunk<span class="token keyword">echo</span> %cd%-------------3<span class="token function">mkdir</span> sala<span class="token function">cd</span> C:\<span class="token operator">!</span>target<span class="token operator">!</span>\Splunk\etc\apps\sala<span class="token keyword">echo</span> %cd%-------------4xcopy C:\<span class="token string">"Program Files"</span>\Splunk\etc\apps\sala C:\mywizard-aiops----ntt-phase2\splunk\sala /e /y<span class="token function">git</span> add <span class="token keyword">.</span><span class="token function">git</span> commit -m <span class="token string">"%A_NOW%"</span><span class="token function">git</span> push pause</code></pre><h3 id="实例5"><a href="#实例5" class="headerlink" title="实例5"></a>实例5</h3><pre class=" language-bash"><code class="language-bash">@echo off<span class="token keyword">set</span> split<span class="token operator">=</span>-<span class="token keyword">set</span> datetimesplit<span class="token operator">=</span> setlocal enabledelayedexpansion<span class="token keyword">for</span> /f <span class="token string">"tokens=1,2,3,4,*"</span> %%i <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token string">'reg query "HKCU\Control Panel\International" ^| find /i "sShortDate"'</span><span class="token punctuation">)</span> <span class="token keyword">do</span> SET <span class="token string">"dateformat=%%k"</span> IF <span class="token string">"%dateformat%"</span> <span class="token operator">==</span> <span class="token string">"M/d/yyyy"</span>   <span class="token keyword">set</span> A_DATE<span class="token operator">=</span>%date:~6,4%%split%%date:~0,2%%split%%date:~3,2%IF <span class="token string">"%dateformat%"</span> <span class="token operator">==</span> <span class="token string">"M/d/yy"</span>     <span class="token keyword">set</span> A_DATE<span class="token operator">=</span>20%date:~6,2%%split%%date:~0,2%%split%%date:~3,2%IF <span class="token string">"%dateformat%"</span> <span class="token operator">==</span> <span class="token string">"MM/dd/yy"</span>   <span class="token keyword">set</span> A_DATE<span class="token operator">=</span>20%date:~6,2%%split%%date:~0,2%%split%%date:~3,2%IF <span class="token string">"%dateformat%"</span> <span class="token operator">==</span> <span class="token string">"MM/dd/yyyy"</span> <span class="token keyword">set</span> A_DATE<span class="token operator">=</span>%date:~6,4%%split%%date:~0,2%%split%%date:~3,2%IF <span class="token string">"%dateformat%"</span> <span class="token operator">==</span> <span class="token string">"yy/MM/dd"</span>   <span class="token keyword">set</span> A_DATE<span class="token operator">=</span>20%date:~0,2%%split%%date:~3,2%%split%%date:~6,2%IF <span class="token string">"%dateformat%"</span> <span class="token operator">==</span> <span class="token string">"yyyy-MM-dd"</span> <span class="token keyword">set</span> A_DATE<span class="token operator">=</span>%date:~0,4%%split%%date:~5,2%%split%%date:~8,2%IF <span class="token string">"%dateformat%"</span> <span class="token operator">==</span> <span class="token string">"dd-MMM-yy"</span>  <span class="token keyword">set</span> A_DATE<span class="token operator">=</span>20%date:~7,2%%split%%date:~3,3%%split%%date:~0,2%<span class="token keyword">set</span> A_NOW<span class="token operator">=</span>%A_DATE%%datetimesplit%%time:~0,2%%split%%time:~3,2%%split%%time:~6,2%<span class="token keyword">echo</span> %cd%-------------1<span class="token function">cd</span> C:\mywizard-aiops----ntt-phase2<span class="token function">git</span> pull<span class="token keyword">echo</span> %cd%-------------2<span class="token function">rmdir</span> /s /q C:\mywizard-aiops----ntt-phase2\splunk\sala\<span class="token function">cd</span> C:\mywizard-aiops----ntt-phase2\splunk<span class="token keyword">echo</span> %cd%-------------3<span class="token function">mkdir</span> sala<span class="token function">cd</span> C:\<span class="token operator">!</span>target<span class="token operator">!</span>\Splunk\etc\apps\sala<span class="token keyword">echo</span> %cd%-------------4xcopy C:\<span class="token string">"Program Files"</span>\Splunk\etc\apps\sala C:\mywizard-aiops----ntt-phase2\splunk\sala /e /y<span class="token function">git</span> add <span class="token keyword">.</span><span class="token function">git</span> commit -m <span class="token string">"%A_NOW%"</span><span class="token function">git</span> push pause</code></pre><h3 id="实例6"><a href="#实例6" class="headerlink" title="实例6"></a>实例6</h3><pre class=" language-bash"><code class="language-bash">@echo offdel /q /s C:\indexbackup\tmp\*.*setlocal enabledelayedexpansion<span class="token keyword">for</span> /f <span class="token string">"tokens=* delims="</span>  %%i <span class="token keyword">in</span> <span class="token punctuation">(</span>C:\indexbackup\session_name.txt<span class="token punctuation">)</span>  <span class="token keyword">do</span> <span class="token punctuation">(</span><span class="token keyword">set</span> target<span class="token operator">=</span>%%i<span class="token keyword">echo</span> <span class="token operator">!</span>target<span class="token operator">!</span>PowerShell Compress-Archive -Path D:\splunk_db\<span class="token operator">!</span>target<span class="token operator">!</span> -Force -DestinationPath C:\indexbackup\tmp\<span class="token operator">!</span>target<span class="token operator">!</span>.zip<span class="token punctuation">)</span>  del /q /s C:\indexbackup\index\*.*xcopy C:\indexbackup\tmp C:\indexbackup\index /e /ydel /q /s C:\indexbackup\tmp\*.*</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> batch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式（一）</title>
      <link href="/2019/10/24/zheng-ze-biao-da-shi-yi/"/>
      <url>/2019/10/24/zheng-ze-biao-da-shi-yi/</url>
      
        <content type="html"><![CDATA[<h3 id="之前在两个页面URL传参的任务中用到了正则表达式，现在来系统的介绍一下正则表达式。"><a href="#之前在两个页面URL传参的任务中用到了正则表达式，现在来系统的介绍一下正则表达式。" class="headerlink" title="之前在两个页面URL传参的任务中用到了正则表达式，现在来系统的介绍一下正则表达式。"></a>之前在两个页面URL传参的任务中用到了正则表达式，现在来系统的介绍一下正则表达式。</h3><p><strong>首先要知道为什么用正则</strong></p><p>典型的搜索和替换操作要求您提供与预期的搜索结果匹配的确切文本。虽然这种技术对于对静态文本执行简单搜索和替换任务可能已经足够了，但它缺乏灵活性，<br>若采用这种方法搜索动态文本，即使不是不可能，至少也会变得很困难。<br>通过使用正则表达式，可以：<br>测试字符串内的模式。<br>例如，可以测试输入字符串，以查看字符串内是否出现电话号码模式或信用卡号码模式。这称为数据验证。<br>替换文本。<br>可以使用正则表达式来识别文档中的特定文本，完全删除该文本或者用其他文本替换它。<br>基于模式匹配从字符串中提取子字符串。<br>可以查找文档内或输入域内特定的文本。<br>例如，您可能需要搜索整个网站，删除过时的材料，以及替换某些 HTML 格式标记。在这种情况下，可以使用正则表达式来确定在每个文件中是否出现该材料或该<br> HTML 格式标记。此过程将受影响的文件列表缩小到包含需要删除或更改的材料的那些文件。然后可以使用正则表达式来删除过时的材料。最后，可以使用正则表<br> 达式来搜索和替换标记。</p><p><strong>一些基础的查询如下</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>0-9<span class="token punctuation">]</span>+匹配多个数字， <span class="token punctuation">[</span>0-9<span class="token punctuation">]</span> 匹配单个数字，+ 匹配一个或者多个。abc$匹配字母 abc 并以 abc 结尾，$ 为匹配输入字符串的结束位置。</code></pre><p><strong>数：</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token keyword">function</span> getUrlParam<span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                var reg <span class="token operator">=</span> new RegExp<span class="token punctuation">(</span><span class="token string">"(^|&amp;)"</span> + name + <span class="token string">"=([^&amp;]*)(&amp;|$)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                var r <span class="token operator">=</span> window.location.search.substr<span class="token punctuation">(</span>1<span class="token punctuation">)</span>.match<span class="token punctuation">(</span>reg<span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token keyword">return</span> unescape<span class="token punctuation">(</span>r<span class="token punctuation">[</span>2<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> null<span class="token punctuation">;</span>             <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>            var x1 <span class="token operator">=</span> getUrlParam<span class="token punctuation">(</span><span class="token string">'参数'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>x1 <span class="token operator">==</span><span class="token operator">=</span> <span class="token string">"Customer Focus"</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                 document.getElementById<span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">)</span>.click<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125; </span></code></pre><p><strong>作</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> HTML5 </tag>
            
            <tag> 正则表达式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>yml文件安装app.md</title>
      <link href="/2019/10/11/yml-wen-jian-an-zhuang-app/"/>
      <url>/2019/10/11/yml-wen-jian-an-zhuang-app/</url>
      
        <content type="html"><![CDATA[<h2 id="yml文件安装app-md"><a href="#yml文件安装app-md" class="headerlink" title="yml文件安装app.md"></a>yml文件安装app.md</h2><h3 id="yml文件放到指定路径"><a href="#yml文件放到指定路径" class="headerlink" title="yml文件放到指定路径"></a>yml文件放到指定路径</h3><h3 id="在这个文件夹的路径下依次执行如下命令："><a href="#在这个文件夹的路径下依次执行如下命令：" class="headerlink" title="在这个文件夹的路径下依次执行如下命令："></a>在这个文件夹的路径下依次执行如下命令：</h3><pre class=" language-bash"><code class="language-bash">①docker-compose up -d mongo②docker-compose up -d mongo-init-replica③docker-compose up -d rocketchat④docker logs rocketchat_ap⑤docker-compose up -d hubot</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> yml </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>yml文件</title>
      <link href="/2019/10/10/yml-wen-jian-ge-shi/"/>
      <url>/2019/10/10/yml-wen-jian-ge-shi/</url>
      
        <content type="html"><![CDATA[<h2 id="yml文件"><a href="#yml文件" class="headerlink" title="yml文件"></a>yml文件</h2><pre class=" language-bash"><code class="language-bash">version: <span class="token string">'3'</span>services:  mongo:    image: mongo:4.0    restart: unless-stopped<span class="token comment" spellcheck="true">#    image: mongo:4.1</span>    ports:      - 27017:27017    volumes:<span class="token comment" spellcheck="true">#      - /etc/localtime:/etc/localtime:ro</span>      - .\data\docker\mongo:/data/db    command: mongod --smallfiles --oplogSize 128 --replSet rs0 --storageEngine<span class="token operator">=</span>mmapv1    hostname: mongo    container_name: rocketchat_db    labels:      - <span class="token string">"traefik.enable=false"</span>  mongo-init-replica:    image: mongo:4.0    command: <span class="token operator">></span>      <span class="token function">bash</span> -c        <span class="token string">"for i in <span class="token variable"><span class="token variable">`</span><span class="token function">seq</span> 1 30<span class="token variable">`</span></span>; do          mongo mongo/rocketchat --eval \"            rs.initiate(&amp;#123;              _id: 'rs0',              members: [ &amp;#123; _id: 0, host: 'localhost:27017' &amp;#125; ]&amp;#125;)\" &amp;&amp;          s=$<span class="token variable">$?</span> &amp;&amp; break || s=$<span class="token variable">$?</span>;          echo \"Tried $<span class="token variable">$i</span> times. Waiting 5 secs...\";          sleep 5;        done; (exit $<span class="token variable">$s</span>)"</span>    depends_on:      - mongo  rocketchat:    image: rocket.chat:3.0.7    command: <span class="token operator">></span>      <span class="token function">bash</span> -c        <span class="token string">"for i in <span class="token variable"><span class="token variable">`</span><span class="token function">seq</span> 1 30<span class="token variable">`</span></span>; do          node main.js &amp;&amp;          s=$<span class="token variable">$?</span> &amp;&amp; break || s=$<span class="token variable">$?</span>;          echo \"Tried $<span class="token variable">$i</span> times. Waiting 5 secs...\";          sleep 5;        done; (exit $<span class="token variable">$s</span>)"</span>    restart: unless-stopped    depends_on:      - mongo    ports:      - 3000:3000    hostname: rocket.chat_3.0.7    container_name: rocketchat_ap    volumes:<span class="token comment" spellcheck="true">#      - /etc/localtime:/etc/localtime:ro</span>      - .\data\docker\rocketchat:/app/uploads    environment:      - PORT<span class="token operator">=</span>3000<span class="token comment" spellcheck="true">#      - ROOT_URL=http://10.254.164.135:3000/rocketchat</span>      - ROOT_URL<span class="token operator">=</span>http://localhost:3000/rocketchat      - MONGO_URL<span class="token operator">=</span>mongodb://mongo:27017/meteor      - MONGO_OPLOG_URL<span class="token operator">=</span>mongodb://mongo:27017/local<span class="token comment" spellcheck="true">#      - MONGO_URL=mongodb://mongo:27017/rocketchat</span><span class="token comment" spellcheck="true">#      - MONGO_URL=mongodb://10.254.164.135:27017/rocketchat</span>      - ADMIN_USERNAME<span class="token operator">=</span>admin      - ADMIN_PASS<span class="token operator">=</span>SALAsala0033<span class="token comment" spellcheck="true">#    labels:</span><span class="token comment" spellcheck="true">#      - "traefik.backend=rocketchat"</span><span class="token comment" spellcheck="true">#      - "traefik.frontend.rule=Host: your.domain.tld"</span>  hubot:    image: rocketchat/hubot-rocketchat:v1.0.11    depends_on:      - rocketchat    ports:      - 8080:8080    container_name: hubot    restart: unless-stopped    environment:<span class="token comment" spellcheck="true">#      - ROCKETCHAT_URL=http://10.254.164.135:3000/rocketchat</span>      - ROCKETCHAT_URL<span class="token operator">=</span>http://localhost:3000/rocketchat      - ROCKETCHAT_ROOM<span class="token operator">=</span>test_room      - ROCKETCHAT_USER<span class="token operator">=</span>sala      - ROCKETCHAT_PASSWORD<span class="token operator">=</span>bot.bot      - BOT_NAME<span class="token operator">=</span>SALA      - EXTERNAL_SCRIPTS<span class="token operator">=</span>hubot-seen,hubot-links    volumes:<span class="token comment" spellcheck="true">#      - /etc/localtime:/etc/localtime:ro</span>      - .\data\docker\hubot:/home/hubot/scripts<span class="token comment" spellcheck="true">#    extra_hosts:</span><span class="token comment" spellcheck="true">#      - "dh4.mywizard-aiops.accenture.com:172.22.0.3"</span><span class="token comment" spellcheck="true">#networks:</span><span class="token comment" spellcheck="true">#  default:</span><span class="token comment" spellcheck="true">#    driver: bridge</span><span class="token comment" spellcheck="true">#    ipam:</span><span class="token comment" spellcheck="true">#      driver: default</span><span class="token comment" spellcheck="true">#      config:</span><span class="token comment" spellcheck="true">#        - subnet: 172.18.0.0/24</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> yml </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>随心</title>
      <link href="/2019/10/07/sui-xin-1/"/>
      <url>/2019/10/07/sui-xin-1/</url>
      
        <content type="html"><![CDATA[<h3 id="《序》"><a href="#《序》" class="headerlink" title="《序》"></a>《序》</h3><p>  冲着变换颜色的灯光吐出的烟气十分的撩人，在酒吧里，一个旋转的投光机散下<br>红色、绿色、紫色，他自己坐在那里，吸着烟，却在嘴角露出微笑，也许在此刻自认<br>为美丽的烟气也能让他心存感激，他太累了。<br>  在跑步的他，会感谢学校操场上站在围栏边上彻夜常亮的路灯，昏暗发黄的路灯<br>不知从哪年开始，到了今年忽亮忽暗的，是它想照亮想照亮的人吧，至少在他经过的<br>时候会格外地亮。<br>  他会感谢校园里年迈的老树，在长板上久坐时感觉不到秋雨中瑟瑟的微风，甚至<br>身体已经抖动，那把黑色的雨伞依旧伫立在他身上。没有蒙蒙的细雨，伞上却滴答<br>滴答响个不停。<br>  他依旧会感谢灼热的太阳，如果那把黑色的伞没有挡在她的额头，故事也许从来<br>不会这么写。<br>  然而现在。<br>  呼~~的一声。<br>  猛吸了一口，片刻后全部的吐了出来，烟气悬在半空，任凭灯色撒在上面。“酒吧<br>要散场了”，他想。收起展露出的微笑。<br>看着黑色的手机屏，所有都止步在了突然亮起来的那一排字：<br>“说了这么多，我真的对不起你，明天早上有课，你想说什么发给<br>我，明天早上起来后会好好回复你的。”<br>  他收起的嘴角又折出微笑，“凌晨两点关的酒吧，现在才一点<br>四十，再抽一根就走吧，”那杯蓝色的今夜不回家一饮而尽，冰块<br>在放下杯子时却没有发出任何响声，只有清吧里面舒缓的音乐让<br>酒意挥洒的淋漓尽致 ，他不知道何时打开的聊天窗口，又要在<br>酒吧最后一首音乐中结束。<br>  灯光洒向舞台，“我旁边的这位小姐姐送给大家一首《走马》，<br>希望在对岸等你的那位可以尽早遇见你。”今天酒吧驻唱的主唱<br>是两位25岁左右的女人，年轻的那位笑嘻嘻地冲台下说道。音<br>乐缓缓地响起，烟雾在变换颜色的灯光下跳动着、舞着。他右手<br>熟练的燃起打火机，左手把持着烟对准火苗上方，猛地一吸，发<br>出兹拉兹拉的声音后，他吐出红色、绿色、紫色的烟雾。<br>  他把头埋在尽是烟灰的桌子上，他似乎在想着什么……</p>]]></content>
      
      
      
        <tags>
            
            <tag> 小说 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>splunk_download_link</title>
      <link href="/2019/09/29/splunk-download-link/"/>
      <url>/2019/09/29/splunk-download-link/</url>
      
        <content type="html"><![CDATA[<h2 id="splunk-download-link"><a href="#splunk-download-link" class="headerlink" title="splunk_download_link"></a>splunk_download_link</h2><pre class=" language-bash"><code class="language-bash">https://www.splunk.com/page/previous_releases<span class="token comment" spellcheck="true">#x86_64windows</span> </code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> splunk </tag>
            
            <tag> download </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git上传source</title>
      <link href="/2019/09/20/git-shang-chuan-source/"/>
      <url>/2019/09/20/git-shang-chuan-source/</url>
      
        <content type="html"><![CDATA[<h2 id="git上传source"><a href="#git上传source" class="headerlink" title="git上传source"></a>git上传source</h2><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> pull<span class="token function">git</span> add <span class="token keyword">.</span><span class="token function">git</span> commit -m <span class="token string">"注释信息"</span><span class="token function">git</span> push  </code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>添加服务器权限</title>
      <link href="/2019/09/20/fu-wu-qi-tian-jia-quan-xian/"/>
      <url>/2019/09/20/fu-wu-qi-tian-jia-quan-xian/</url>
      
        <content type="html"><![CDATA[<h2 id="添加服务器权限"><a href="#添加服务器权限" class="headerlink" title="添加服务器权限"></a>添加服务器权限</h2><pre class=" language-bash"><code class="language-bash"><span class="token function">ssh</span>  ip-10-4-25-91.ap-northeast-1.compute.internal<span class="token function">sudo</span> <span class="token function">su</span><span class="token function">useradd</span> aaam_yi.g.lin<span class="token function">mkdir</span> /home/aaam_pinjing.wu/.ssh<span class="token function">cd</span> /home/aaam_yi.g.lin/.ssh<span class="token function">vi</span> authorized_keys    把key粘贴进去<span class="token function">cp</span> -p /etc/group /etc/group.202005202<span class="token function">vi</span> /etc/group在whell这行最后加上需要添加的人的名aaam_pinjing.wu</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> 服务器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建个人博客 HEXO＋Node.Js（四）</title>
      <link href="/2019/08/26/da-jian-ge-ren-bo-ke-hexo-node-js-si/"/>
      <url>/2019/08/26/da-jian-ge-ren-bo-ke-hexo-node-js-si/</url>
      
        <content type="html"><![CDATA[<h2 id="本站采用Hexo-Theme-Matery主题"><a href="#本站采用Hexo-Theme-Matery主题" class="headerlink" title="本站采用Hexo-Theme-Matery主题"></a>本站采用Hexo-Theme-Matery主题</h2><h3 id="修改摘要-summary-在“前一篇-后一篇”卡片中”失效”的问题"><a href="#修改摘要-summary-在“前一篇-后一篇”卡片中”失效”的问题" class="headerlink" title="修改摘要(summary)在“前一篇/后一篇”卡片中”失效”的问题"></a>修改摘要(summary)在“前一篇/后一篇”卡片中”失效”的问题</h3><p>matery的文章目录是卡片式的。<br>在首页，若文章有摘要，则会显示摘要(summary)，若没有才会显示文章的前70个字。<br>但是在打开其中一篇文章时，最底部的“前一篇”和“后一篇”文章的卡片上却直接显示文章的前120个字，不论前/后一篇文章有没有摘要。我做出如下更改，使得在“前一篇”和“后一篇”文章的卡片上也同样显示摘要。<br>对/themes/hexo-theme-matery/layout/_partial/prev-next.ejs文件作如下更改：</p><p>第41行左右，<code>&lt;div class=&quot;summary&quot;&gt;...&lt;/div&gt;</code>的那行改成以下几行：</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>div class<span class="token operator">=</span><span class="token string">"summary"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>% <span class="token keyword">if</span> <span class="token punctuation">(</span>page.prev.summary <span class="token operator">&amp;&amp;</span> page.prev.summary.length <span class="token operator">></span> 0<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123; %></span>          <span class="token operator">&lt;</span>%- page.prev.summary %<span class="token operator">></span>      <span class="token operator">&lt;</span>% <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125; else &amp;#123; %></span>          <span class="token operator">&lt;</span>%- strip_html<span class="token punctuation">(</span>page.prev.content<span class="token punctuation">)</span>.substring<span class="token punctuation">(</span>0, 70<span class="token punctuation">)</span> %<span class="token operator">></span>      <span class="token operator">&lt;</span>% <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125; %></span>  <span class="token operator">&lt;</span>/div<span class="token operator">></span></code></pre><p>第104行左右，<code>&lt;div class=&quot;summary&quot;&gt;...&lt;/div&gt;</code>的那行改成以下几行：</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>div class<span class="token operator">=</span><span class="token string">"summary"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>% <span class="token keyword">if</span> <span class="token punctuation">(</span>page.summary <span class="token operator">&amp;&amp;</span> page.summary.length <span class="token operator">></span> 0<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123; %></span>          <span class="token operator">&lt;</span>%- page.summary %<span class="token operator">></span>      <span class="token operator">&lt;</span>% <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125; else &amp;#123; %></span>          <span class="token operator">&lt;</span>%- strip_html<span class="token punctuation">(</span>page.content<span class="token punctuation">)</span>.substring<span class="token punctuation">(</span>0, 70<span class="token punctuation">)</span> %<span class="token operator">></span>      <span class="token operator">&lt;</span>% <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125; %></span>  <span class="token operator">&lt;</span>/div<span class="token operator">></span></code></pre><p>第168行左右，<code>&lt;div class=&quot;summary&quot;&gt;...&lt;/div&gt;</code>的那行改成以下几行：</p><pre class=" language-bash"><code class="language-bash">  <span class="token operator">&lt;</span>div class<span class="token operator">=</span><span class="token string">"summary"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>% <span class="token keyword">if</span> <span class="token punctuation">(</span>page.next.summary <span class="token operator">&amp;&amp;</span> page.next.summary.length <span class="token operator">></span> 0<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123; %></span>          <span class="token operator">&lt;</span>%- page.next.summary %<span class="token operator">></span>      <span class="token operator">&lt;</span>% <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125; else &amp;#123; %></span>          <span class="token operator">&lt;</span>%- strip_html<span class="token punctuation">(</span>page.next.content<span class="token punctuation">)</span>.substring<span class="token punctuation">(</span>0, 70<span class="token punctuation">)</span> %<span class="token operator">></span>      <span class="token operator">&lt;</span>% <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125; %></span></code></pre><h3 id="增加在文章页显示作者名的功能"><a href="#增加在文章页显示作者名的功能" class="headerlink" title="增加在文章页显示作者名的功能"></a>增加在文章页显示作者名的功能</h3><p>原来只会在文章卡片上显示作者名（并且是在没有分类的情况下），在文章内容页没有显示作者名。作如下修改使得在文章页显示：<br>在post-detail.ejs第37行左右，增加下列代码：</p><pre class=" language-bash"><code class="language-bash"> <span class="token operator">&lt;</span>div class<span class="token operator">=</span><span class="token string">"text-color"</span> align<span class="token operator">=</span>center style<span class="token operator">=</span><span class="token string">"font-size:large"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>% <span class="token keyword">if</span> <span class="token punctuation">(</span>page.author <span class="token operator">&amp;&amp;</span> page.author.length <span class="token operator">></span> 0<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123; %></span>        <span class="token operator">&lt;</span>i class<span class="token operator">=</span><span class="token string">"far fa-square"</span><span class="token operator">></span><span class="token operator">&lt;</span>/i<span class="token operator">></span> <span class="token operator">&lt;</span>%- page.author %<span class="token operator">></span>    <span class="token operator">&lt;</span>% <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125; else &amp;#123; %></span>        <span class="token operator">&lt;</span>i class<span class="token operator">=</span><span class="token string">"far fa-square"</span><span class="token operator">></span><span class="token operator">&lt;</span>/i<span class="token operator">></span> <span class="token operator">&lt;</span>%- config.author %<span class="token operator">></span>    <span class="token operator">&lt;</span>% <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125; %></span><span class="token operator">&lt;</span>/div<span class="token operator">></span></code></pre><h3 id="修改配色"><a href="#修改配色" class="headerlink" title="修改配色"></a>修改配色</h3><p>原来的主题虽然很好看，但是没有一个统一的主题色。可在/themes/hexo-theme-matery/source/css/matery.css中修改标题栏、菜单栏、各种标签背景的颜色，使主题颜色为Material的粉红色。感谢Material Design Colours提供的配色方案。</p><p><strong>到此搭建个人博客就告一段落啦~</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> HEXO </tag>
            
            <tag> Node.js </tag>
            
            <tag> Github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows计划任务</title>
      <link href="/2019/08/20/windows-ji-hua-ren-wu/"/>
      <url>/2019/08/20/windows-ji-hua-ren-wu/</url>
      
        <content type="html"><![CDATA[<h3 id="通过Windows计划任务这一功能来实现定时触发exe、bat等脚本。"><a href="#通过Windows计划任务这一功能来实现定时触发exe、bat等脚本。" class="headerlink" title="通过Windows计划任务这一功能来实现定时触发exe、bat等脚本。"></a>通过Windows计划任务这一功能来实现定时触发exe、bat等脚本。</h3><h4 id="➞右键此电脑"><a href="#➞右键此电脑" class="headerlink" title="➞右键此电脑"></a>➞右键此电脑</h4><h4 id="➞管理"><a href="#➞管理" class="headerlink" title="➞管理"></a>➞管理</h4><h4 id="➞计算机管理"><a href="#➞计算机管理" class="headerlink" title="➞计算机管理"></a>➞计算机管理</h4><h4 id="➞本地"><a href="#➞本地" class="headerlink" title="➞本地"></a>➞本地</h4><h4 id="➞Task-Scheduler"><a href="#➞Task-Scheduler" class="headerlink" title="➞Task Scheduler"></a>➞Task Scheduler</h4><h4 id="➞Create-Basic-Task…"><a href="#➞Create-Basic-Task…" class="headerlink" title="➞Create Basic Task…"></a>➞Create Basic Task…</h4><h4 id="➞Name-和-Description"><a href="#➞Name-和-Description" class="headerlink" title="➞Name 和  Description"></a>➞Name 和  Description</h4><h4 id="➞Trigger-就是计划实行的时间"><a href="#➞Trigger-就是计划实行的时间" class="headerlink" title="➞Trigger 就是计划实行的时间"></a>➞Trigger 就是计划实行的时间</h4><h4 id="➞我选的Daily-接下来配置触发的具体时间"><a href="#➞我选的Daily-接下来配置触发的具体时间" class="headerlink" title="➞我选的Daily 接下来配置触发的具体时间"></a>➞我选的Daily 接下来配置触发的具体时间</h4><h4 id="➞接下来选择触发的行为（可以是脚本，email，显示一条信息）"><a href="#➞接下来选择触发的行为（可以是脚本，email，显示一条信息）" class="headerlink" title="➞接下来选择触发的行为（可以是脚本，email，显示一条信息）"></a>➞接下来选择触发的行为（可以是脚本，email，显示一条信息）</h4><h4 id="➞我选择的是-触发一个脚本"><a href="#➞我选择的是-触发一个脚本" class="headerlink" title="➞我选择的是 触发一个脚本"></a>➞我选择的是 触发一个脚本</h4><h4 id="➞输入脚本的路径"><a href="#➞输入脚本的路径" class="headerlink" title="➞输入脚本的路径"></a>➞输入脚本的路径</h4><h4 id="➞finish"><a href="#➞finish" class="headerlink" title="➞finish"></a>➞finish</h4><h4 id="➞勾选finish上面的选择框"><a href="#➞勾选finish上面的选择框" class="headerlink" title="➞勾选finish上面的选择框"></a>➞勾选finish上面的选择框</h4><h4 id="➞出现此次计划任务的详细内容，在显示框下面选择不论是否logged-in都run"><a href="#➞出现此次计划任务的详细内容，在显示框下面选择不论是否logged-in都run" class="headerlink" title="➞出现此次计划任务的详细内容，在显示框下面选择不论是否logged in都run"></a>➞出现此次计划任务的详细内容，在显示框下面选择不论是否logged in都run</h4><h4 id="➞点击ok"><a href="#➞点击ok" class="headerlink" title="➞点击ok"></a>➞点击ok</h4><h4 id="➞输入自己的电脑密码"><a href="#➞输入自己的电脑密码" class="headerlink" title="➞输入自己的电脑密码"></a>➞输入自己的电脑密码</h4><h4 id="➞创建成功"><a href="#➞创建成功" class="headerlink" title="➞创建成功"></a>➞创建成功</h4>]]></content>
      
      
      
        <tags>
            
            <tag> Windows计划任务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建个人博客 HEXO＋Node.Js（三）</title>
      <link href="/2019/08/18/da-jian-ge-ren-bo-ke-hexo-node-js-san/"/>
      <url>/2019/08/18/da-jian-ge-ren-bo-ke-hexo-node-js-san/</url>
      
        <content type="html"><![CDATA[<h2 id="博客搭建一些基础概念"><a href="#博客搭建一些基础概念" class="headerlink" title="博客搭建一些基础概念"></a>博客搭建一些基础概念</h2><h3 id="分类和标签的区别与联系"><a href="#分类和标签的区别与联系" class="headerlink" title="分类和标签的区别与联系"></a>分类和标签的区别与联系</h3><p><strong>分类和标签是博客系统的两项功能</strong></p><p>**标签和分类的区别： **</p><p>1）同一篇文章标签可以用多个，但通常只能属于一个分类； </p><p>2）标签一般是在写作完成后，根据文章大意进行添加的；</p><p>3）标签可以把文章中重点词语提炼出来，有关键词的意义，但是分类没有； </p><p>4）标签通常反映了您的主要关注点，比如财经、互联网、体育等等； </p><p>5）标签给了我们一条联系他人的纽带，通过标签可以找到您的“同好” </p><h2 id="HEXO的基础命令语法"><a href="#HEXO的基础命令语法" class="headerlink" title="HEXO的基础命令语法"></a>HEXO的基础命令语法</h2><h3 id="创建文章"><a href="#创建文章" class="headerlink" title="创建文章"></a>创建文章</h3><p>在站点文件夹中打开 git bash，输入如下命令创建文章，其中 title 为文章的标题</p><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"title"</span></code></pre><p>当输入命令后，就会在 source/_post 文件夹下创建一个文件，命名为：title.md</p><p>这个文件就是将要发布到网站上的原始文件，用于记录文章内容。</p><h3 id="部署Hexo"><a href="#部署Hexo" class="headerlink" title="部署Hexo"></a>部署Hexo</h3><pre class=" language-bash"><code class="language-bash">$ hexo init</code></pre><p><strong>注：这个命令会初始化博客的目录，所以，执行这个命令时，在你想创建的目录下执行，就自动生成到对应目录下。执行命令会在当前命令的路径下，生成以下文件：</strong></p><pre class=" language-bash"><code class="language-bash">  <span class="token keyword">.</span>    ├── .deploy         //执行hexo deploy命令部署到GitHub上的内容目录    ├── public          //执行hexo generate命令，输出的静态网页内容目录    ├── scaffolds      //layout模板文件目录，其中的md文件可以添加编辑    ├── scripts        //扩展脚本目录，这里可以自定义一些javascript脚本    ├── <span class="token function">source</span>         //文章源码目录，该目录下的markdown和html文件均会被hexo处理。该页面对应repo的根目录，404文件、favicon.ico文件，CNAME文件等都应该放这里，该目录下可新建页面目录。      <span class="token operator">|</span>   ├── _drafts    //草稿文章    <span class="token operator">|</span>   └── _posts     //发布文章    ├── themes          //主题文件目录    ├── _config.yml     //全局配置文件，大多数的设置都在这里    └── package.json     //应用程序数据，指明hexo的版本等信息</code></pre><h3 id="相关的命令"><a href="#相关的命令" class="headerlink" title="相关的命令"></a>相关的命令</h3><pre class=" language-bash"><code class="language-bash">    hexo new <span class="token string">"postName"</span>       <span class="token comment" spellcheck="true">#新建文章</span>    hexo new page <span class="token string">"pageName"</span>  <span class="token comment" spellcheck="true">#新建页面</span>    hexo generate             <span class="token comment" spellcheck="true">#生成静态页面至public目录</span>    hexo server               <span class="token comment" spellcheck="true">#开启预览访问端口（默认端口4000，'ctrl + c'关闭server）</span>    hexo deploy               <span class="token comment" spellcheck="true">#将.deploy目录部署到GitHub</span></code></pre><h3 id="有的命令可以简写"><a href="#有的命令可以简写" class="headerlink" title="有的命令可以简写"></a>有的命令可以简写</h3><pre class=" language-bash"><code class="language-bash">    hexo n <span class="token operator">==</span> hexo new    hexo g <span class="token operator">==</span> hexo generate    hexo s <span class="token operator">==</span> hexo server    hexo d <span class="token operator">==</span> hexo deploy</code></pre><h3 id="复合命令"><a href="#复合命令" class="headerlink" title="复合命令"></a>复合命令</h3><pre class=" language-bash"><code class="language-bash">    <span class="token comment" spellcheck="true"># 生成完毕后自动部署网站</span>    $ hexo g -d</code></pre><h3 id="clean命令清除缓存"><a href="#clean命令清除缓存" class="headerlink" title="clean命令清除缓存"></a>clean命令清除缓存</h3><p>有时候生成的网页出错了，而生成的rss其实没有清除，那么用下面的命令，再重新生成吧!</p><pre class=" language-bash"><code class="language-bash">   $ hexo clean</code></pre><h2 id="写页面的一些操作"><a href="#写页面的一些操作" class="headerlink" title="写页面的一些操作"></a>写页面的一些操作</h2><h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><p>井号代表标题，两井号代表大标题，依次向下类推，直到六个井号，代表六级标题。</p><h3 id="字体样式"><a href="#字体样式" class="headerlink" title="字体样式"></a>字体样式</h3><pre class=" language-bash"><code class="language-bash">*斜体***粗体*****加粗斜体***~~删除线~~</code></pre><h3 id="头部设置"><a href="#头部设置" class="headerlink" title="头部设置"></a>头部设置</h3><pre class=" language-bash"><code class="language-bash">comments: <span class="token boolean">true</span> <span class="token comment" spellcheck="true">#是否可评论</span>toc: <span class="token boolean">true</span> <span class="token comment" spellcheck="true">#是否显示文章目录</span>categories: <span class="token string">"分类名称"</span> <span class="token comment" spellcheck="true">#分类（一个）</span>tags:   <span class="token comment" spellcheck="true">#标签</span>    - 标签名称    - 标签名称（多个）</code></pre><p><strong>这里就先介绍基本的问题与操作到这里</strong><br><strong>搭建个人博客 HEXO＋Node.Js（四）将进一步讲解本站主题相关的一些问题！！</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> HEXO </tag>
            
            <tag> Node.js </tag>
            
            <tag> Github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建个人博客 HEXO＋Node.Js（二）</title>
      <link href="/2019/08/09/da-jian-ge-ren-bo-ke-hexo-node-js-er/"/>
      <url>/2019/08/09/da-jian-ge-ren-bo-ke-hexo-node-js-er/</url>
      
        <content type="html"><![CDATA[<h2 id="配置将本地的hexo链接成网址，变成个人博客网站。"><a href="#配置将本地的hexo链接成网址，变成个人博客网站。" class="headerlink" title="配置将本地的hexo链接成网址，变成个人博客网站。"></a>配置将本地的hexo链接成网址，变成个人博客网站。</h2><h3 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h3><p> 1.点击<a href="https://github.com/" title="Github官网">此处</a>注册(Sign up)你的GitHub账户。</p><p> 2.进入已注册页面后，在右上角的“+”中点击New repository按钮。</p><p> 3.这时注意Owner名后面的Repository name 一定要是这样的格式： Owner名 + .git.io</p><p> 4.继续添加描述、点击public、点击添加.Redme文件。</p><p> 5.点击Create后就可以在你的主页看到你新建的项目了。建完的项目我们先搁置不动，接下来我们去购买属于自己的域名。</p><h3 id="购置域名"><a href="#购置域名" class="headerlink" title="购置域名"></a>购置域名</h3><p>点击<a href="https://wanwang.aliyun.com/domain/" title="阿里云官网">此处</a>查询并购买你的域名。</p><h3 id="解析域名"><a href="#解析域名" class="headerlink" title="解析域名"></a>解析域名</h3><p> 1.点击<a href="https://dns.console.aliyun.com/#/dns/domainList" title="解析域名">此处</a>来解析你的域名（同样我也已经解析过了，这里只会有解析设置）</p><p> 2.点击解析设置进入页面后点击新手引导设置，它会要求你输入IP</p><p> 3.这个IP需要我们打开cmd（win键 + R键），得到窗口后输 ping A.github.io     \注意A代表的是”Owner名”之前Git配置的时候设置过了。</p><p> 4.将得到IP输入到Domian页面的弹出框中后开始解析，等待解析完成域名配置完毕。</p><h3 id="配置hexo"><a href="#配置hexo" class="headerlink" title="配置hexo"></a>配置hexo</h3><p> 1.在你的新建的hexo目录下的source文件夹下，新建一个CNAME.txt的文本文档。</p><p> 2.在文档中输入你的新买的域名（<a href="http://www.incredibleyou.cn)/">www.incredibleyou.cn）</a> ，保存后关闭。</p><p> 3.重命名你的.txt文件，将.txt文件的后缀去掉（文件会提示不可用，确定即可）。</p><h3 id="修改-config-yml"><a href="#修改-config-yml" class="headerlink" title="修改_config.yml"></a>修改_config.yml</h3><p>1.打开你的GitHub项目的主页，找到clone按钮，点击按钮以复制你的repository Url。</p><p>2.在你新建的hexo目录下找到_config.yml，打开，在最下面的deploy部分内容修改：</p><pre class=" language-bash"><code class="language-bash">deploy:type: <span class="token function">git</span>      \**注意每一列value前都要有一个空格**repository： https://github.com/zelin666/zelin666.github.io.git     \注意zelin666是我的名字，需要你填入你自己的名字branch: master</code></pre><h3 id="Git部署"><a href="#Git部署" class="headerlink" title="Git部署"></a>Git部署</h3><p>1.使用git部署，在你新建的hexo目录下空白处右键，点击Git Bash Here</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git --save</code></pre><p>2.执行之前的步骤:(hexo clean –&gt; hexo generate –&gt;hexo deploy)如下：</p><pre class=" language-bash"><code class="language-bash">$ hexo clean$ hexo g$ hexo d</code></pre><h3 id="配置GitHub并再次部署"><a href="#配置GitHub并再次部署" class="headerlink" title="配置GitHub并再次部署"></a>配置GitHub并再次部署</h3><p> 1.在你的GitHub页面点击进入你新建的项目，点击Settings进入设置页面。</p><p> 2.在GitHub Pages设置部分找到Custom domain，并在这里输入你购买的域名。</p><p> 3.使用git部署，在你新建的hexo目录下空白处右键，点击Git Bash Here</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git --save</code></pre><p> 4.最后再次执行之前的步骤:(hexo clean –&gt; hexo generate –&gt;hexo deploy)</p><pre class=" language-bash"><code class="language-bash">$ hexo clean$ hexo g$ hexo d</code></pre><p> 5.你就可以看到你的博客了。</p><p> <strong>注意：每次修改配置信息或者其他必须要执行上面的步骤(g、d)，再去GitHub Pages设置部分找到Custom domain并在这里输入你购买的域名。才可以使得配置信息生效。</strong></p><p><strong>到此需要配置的工作就进行完了</strong><br><strong>搭建个人博客 HEXO＋Node.Js（三）将进一步讲解搭建完毕的一些基本问题与基本操作！！</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> HEXO </tag>
            
            <tag> Node.js </tag>
            
            <tag> Github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建个人博客 HEXO＋Node.Js（一）</title>
      <link href="/2019/08/03/da-jian-ge-ren-bo-ke-hexo-node-js-yi/"/>
      <url>/2019/08/03/da-jian-ge-ren-bo-ke-hexo-node-js-yi/</url>
      
        <content type="html"><![CDATA[<h2 id="安装所需要下载的软件、环境"><a href="#安装所需要下载的软件、环境" class="headerlink" title="安装所需要下载的软件、环境"></a>安装所需要下载的软件、环境</h2><h3 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h3><p>点击<a href="https://nodejs.org/en/" title="Node.js官网">此处</a>访问官网并下载最新版本的node.js。<br>直接一步一步向下安装就可以。</p><h3 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h3><p>点击<a href="https://git-scm.com/" title="Git官网">此处</a>访问官网并下载最新版本的Git。<br>也是直接一步一步向下安装就可以。</p><h3 id="安装HEXO"><a href="#安装HEXO" class="headerlink" title="安装HEXO"></a>安装HEXO</h3><p>1.在本地需要建立一个Hexo文件夹用于存储本地文件(做本地文件保存以及测试使用)</p><p>2.在文件空白处右键，点击Git Bash Here</p><p>3.点击后弹出git命令框，输入此命令下载hexo：</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> -g hexo</code></pre><p><strong>注意：</strong>（git命令框按Ctrl C 是停止服务，不要这样做。）</p><p>4.初始化hexo</p><pre class=" language-bash"><code class="language-bash">$ hexo init</code></pre><p>5.以下四步对建站进行了部署，在进行最后一步后访问 <a href="http://localhost:4000/">http://localhost:4000</a> 就可以查看你的本地hexo访问页面了。</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span>$ hexo g$ hexo d$ hexo server</code></pre><p><strong>到此需要下载的工作就进行完了</strong><br><strong>搭建个人博客 HEXO＋Node.Js（二）将进一步讲解如何进行接下来的搭建操作！</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> HEXO </tag>
            
            <tag> Node.js </tag>
            
            <tag> Github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello，This is Shmily~</title>
      <link href="/2018/01/01/di-yi-pian-guan-yu-wo-de-bo-ke/"/>
      <url>/2018/01/01/di-yi-pian-guan-yu-wo-de-bo-ke/</url>
      
        <content type="html"><![CDATA[<h2 id="Welcome-to-my-“home”，as-you-can-see-blog-is-a-part-of-my-life"><a href="#Welcome-to-my-“home”，as-you-can-see-blog-is-a-part-of-my-life" class="headerlink" title="Welcome to my “home”，as you can see,blog is a part of my life,"></a>Welcome to my “home”，as you can see,blog is a part of my life,</h2><h3 id="we-can-share-proposal-and-comment-just-like-cry-laugh-and-jump-in-our-life"><a href="#we-can-share-proposal-and-comment-just-like-cry-laugh-and-jump-in-our-life" class="headerlink" title="we can share,proposal and comment just like cry laugh and jump in our life."></a>we can share,proposal and comment just like cry laugh and jump in our life.</h3><h4 id="when-your-come-to-my-“home”"><a href="#when-your-come-to-my-“home”" class="headerlink" title="when your come to my “home”,"></a>when your come to my “home”,</h4><h4 id="I-will-raise-the-corners-of-my-mouth-and-say"><a href="#I-will-raise-the-corners-of-my-mouth-and-say" class="headerlink" title="I will raise the corners of my mouth and say"></a>I will raise the corners of my mouth and say</h4><h3 id="“Let-me-Shmily-see-how-much-i-love-you-”"><a href="#“Let-me-Shmily-see-how-much-i-love-you-”" class="headerlink" title="“Let me Shmily(see how much i love you!)”."></a>“Let me Shmily(see how much i love you!)”.</h3>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
